Runtime loading is still quite new to RTEMS.
On a traditional system, the linker just puts
all the required parts from various libraries
(from bsp to libc) into the final executable.

This doesn't work for a system who wants to 
support dynamic loading, because e.g. parts
of the C library might be needed _later_, when
new code is loaded.

Therefore, the 'system' executable must
contain all relevant parts of basic components/libraries.

The decision which parts are to be considered 'relevant'
and hence should be included in the 'system' executable shall
be termed "system configuration".

This "system configuration" (in a 'antique UNIX' or vxWorks
sense) is in addition to normal RTEMS configuration 
(which is coded in 'config.c' and 'rtems_netconfig.c')

A special linker script 'symlist.lds' together with
the scripts in the 'config' directory enforces linking
all the listed symbols by declaring them EXTERN().

Sometimes, there is "dead" library code (which is never
used) referencing nonexisting symbols causing
the final link to fail. In these cases, the unresolved
references can simply be 'dummy-defined' in the linker script
e.g. to a value of 0 or 0xdeadbeef...

The makefile Makefile.symlist can be used to generate
a template script from a library:

make -f Makefile.symlist LIBS=libblah.a

Selective components from the library can then be
excluded by commenting or deleting the unwanted
symbols from the script. The edited script should
then be put into the 'config' directory and 'include'd
from 'symlist.lds'.
